from __future__ import annotations

"""Load persona implementations from disk and spawn them as objects.

The spawn system expects each persona to live in its own directory with a
``manifest.yaml`` file. ``launch()`` reads that manifest, dynamically imports
the ``Persona`` class from ``persona.py`` (or falls back to
:mod:`gptfrenzy.persona_loader`), and returns a :class:`PersonaInstance`
wrapper. Capability flags in the manifest determine which methods are exposed
on the spawned instance.

``manifest.yaml`` fields include ``sap_version``, ``assets``, ``capabilities``
and ``license_ref``. A new optional ``entrypoint`` key may point to an
alternate ``"module:function"`` that ``launch()`` will import and call
instead of the default launcher.
"""

import importlib
import importlib.util
from pathlib import Path
from typing import Any, Iterable
import asyncio

import yaml

from .utils import ensure_parent_dirs


class PersonaInstance:
    """Wrapper around a persona implementation enforcing capability flags."""

    def __init__(self, impl: Any, caps: Iterable[str]):
        """Create a new instance backed by ``impl`` with allowed ``caps``."""

        self._impl = impl
        self.capabilities = set(caps)

    async def generate(self, text: str) -> Any:
        """Return text generated by the persona."""

        if "text" not in self.capabilities:
            raise RuntimeError("text capability unavailable")
        result = self._impl.generate(text)
        if asyncio.iscoroutine(result):
            result = await result
        return result

    async def speak(self, audio: Any | None = None) -> Any:
        """Delegate text-to-speech to the persona if allowed."""

        if "voice" not in self.capabilities:
            raise RuntimeError("voice capability unavailable")
        if not hasattr(self._impl, "speak"):
            raise AttributeError("Persona missing speak()")
        result = self._impl.speak(audio)
        if asyncio.iscoroutine(result):
            result = await result
        return result

    async def embody(self, *args: Any, **kwargs: Any) -> Any:
        """Forward embodiment data to the persona if supported."""

        if "realtime_embodiment" not in self.capabilities:
            raise RuntimeError("realtime_embodiment capability unavailable")
        if not hasattr(self._impl, "embody"):
            raise AttributeError("Persona missing embody()")
        result = self._impl.embody(*args, **kwargs)
        if asyncio.iscoroutine(result):
            result = await result
        return result


def _load_persona_class(persona_dir: Path) -> type:
    """Return the ``Persona`` class defined in ``persona_dir``."""
    mod_path = persona_dir / "persona.py"
    if mod_path.is_file():
        spec = importlib.util.spec_from_file_location("persona_mod", mod_path)
        if spec and spec.loader:
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)  # type: ignore
            if hasattr(module, "Persona"):
                return getattr(module, "Persona")
    loader = importlib.import_module("gptfrenzy.persona_loader")
    return getattr(loader, "Persona")


def launch(host: str, persona_path: str, **kwargs: Any) -> PersonaInstance:
    """Instantiate a persona from ``persona_path`` for the given ``host``."""
    persona_dir = Path(persona_path)
    manifest_file = persona_dir / "manifest.yaml"
    try:
        with open(manifest_file, "r", encoding="utf-8") as f:
            manifest = yaml.safe_load(f)
    except (FileNotFoundError, yaml.YAMLError) as exc:
        raise ValueError("manifest.yaml missing or unreadable") from exc
    if manifest.get("sap_version") != "0.3":
        raise ValueError("Unsupported SAP version")

    entrypoint = manifest.get("entrypoint", "gptfrenzy.spawn:launch")
    if entrypoint != "gptfrenzy.spawn:launch":
        mod_name, _, func_name = entrypoint.partition(":")
        if not mod_name or not func_name:
            raise ValueError("Invalid entrypoint")
        module = importlib.import_module(mod_name)
        func = getattr(module, func_name)
        return func(host, persona_path, **kwargs)

    caps = manifest.get("capabilities", ["text"])
    PersonaCls = _load_persona_class(persona_dir)
    persona_obj = PersonaCls(host=host, persona_path=str(persona_dir), **kwargs)
    return PersonaInstance(persona_obj, caps)


def make_manifest(persona_dir: str) -> Path:
    """Write a minimal ``manifest.yaml`` to ``persona_dir`` and return its path."""
    path = Path(persona_dir) / "manifest.yaml"
    Path(persona_dir).mkdir(parents=True, exist_ok=True)
    manifest = {
        "sap_version": "0.3",
        "entrypoint": "gptfrenzy.spawn:launch",
        "assets": [],
        "capabilities": ["text"],
        "license_ref": "./LICENSE_PERSONAS",
    }
    ensure_parent_dirs(path)
    with open(path, "w", encoding="utf-8") as f:
        yaml.safe_dump(manifest, f, sort_keys=False)
    return path
